import io.github.manuelarte.spring.ProjectVersion

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
	}
}

plugins {
	id 'io.spring.dependency-management' version '1.1.7'
	id 'java'
	id "nebula.facet" version "9.6.3"
	id 'net.ltgt.errorprone' version '4.1.0'
	id "org.sonarqube" version "2.8"
	id 'com.palantir.git-version' version '3.1.0'
	id 'maven-publish'
	id 'signing'
	id 'io.codearte.nexus-staging' version '0.21.2'
}

apply plugin: 'com.bmuschko.nexus'

ext.versionFile = file('version.properties')
ext.gitDetails = versionDetails()

ProjectVersion readVersion() {
	logger.quiet 'Reading version file.'
	if (!versionFile.exists()) {
		throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
	}
	ProjectVersion.readVersion(versionFile, gitDetails)
}

group = 'io.github.manuelarte.spring'
version = readVersion()
sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

facets {
	integrationTest {
		parentSourceSet = 'main'
		testTaskName = 'integrationTest'
		includeInCheckLifecycle = true
	}
}

tasks.withType(JavaCompile).configureEach {
	options.errorprone.disableWarningsInGeneratedCode = true
}

sonarqube {
	properties {
		property "sonar.projectKey", "manuelarte_manuelarte-validation"
		property "sonar.organization", "manuelarte"
		property "sonar.host.url", "https://sonarcloud.io"
		properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
	}
}

dependencies {
	errorprone("com.google.errorprone:error_prone_core:2.36.0")

	implementation 'javax.validation:validation-api:2.0.1.Final'
	compileOnly 'org.springframework.boot:spring-boot-starter:3.4.2'
	compileOnly 'org.springframework.boot:spring-boot-starter-data-mongodb:3.4.2'
	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'

	testImplementation 'org.springframework.boot:spring-boot-starter:3.4.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.4.2'
	testImplementation 'org.json:json:20250107'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.15.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.4'
	testImplementation 'org.mockito:mockito-core:5.15.2'
	testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.19'
	testCompileOnly 'org.projectlombok:lombok:1.18.36'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'

	integrationTestImplementation('org.springframework.boot:spring-boot-starter-test:3.4.2') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter:3.4.2'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-web:3.4.2'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb:3.4.2'
	integrationTestImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.18.1'
}

test {
	useJUnitPlatform()
}

integrationTest {
	useJUnitPlatform()
}

jar {
	enabled = true
}

modifyPom {
	project {
		name rootProject.name
		description 'Useful constraints.'
		url 'https://github.com/manuelarte/manuelarte-validation'
		inceptionYear '2020'

		scm {
			url 'https://github.com/manuelarte/manuelarte-validation'
			connection 'scm:https://github.com/manuelarte/manuelarte-validation.git'
			developerConnection 'scm:https://github.com/manuelarte/manuelarte-validation.git'
		}

		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}

		developers {
			developer {
				id 'manuelarte'
				name 'Manuel Doncel Martos'
				email 'manueldoncelmartos@gmail.com'
			}
		}
	}
}

extraArchive {
	sources = true
	tests = false
	javadoc = true
}

nexus {
	sign = true
	repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
	snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
	packageGroup = "io.github.manuelarte.spring" //optional if packageGroup == project.getGroup()
	// stagingProfileId = "yourStagingProfileId" //when not defined will be got from server using "packageGroup"
}